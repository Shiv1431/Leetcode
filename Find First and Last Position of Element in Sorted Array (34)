//Using two while loops
class Solution {
    public int[] searchRange(int[] nums, int target) {
        int mn = -1, mx = -1;
        int n = nums.length;
        int start = 0, end = n - 1;        
        while (start <= end) {
            int mid = start + (end - start) / 2;
            if (nums[mid] == target) {
                mn = mid;
                end = mid - 1; 
            } else if (nums[mid] < target) {
                start = mid + 1;
            } else {
                end = mid - 1;
            }
        }        

        start = 0;
        end = n - 1;
        while (start <= end) {
            int mid = start + (end - start) / 2;
            if (nums[mid] == target) {
                mx = mid;
                start = mid + 1; 
            } else if (nums[mid] < target) {
                start = mid + 1;
            } else {
                end = mid - 1;
            }
        }
        return new int[]{mn, mx};
    }
}


//Using Single while loop
class Solution {
    public int[] searchRange(int[] nums, int target) {
        int mn = -1, mx = -1;
        int start = 0, end = nums.length - 1;
        while (start <= end) {
            int mid = start + (end - start) / 2;   
            if (nums[mid] == target) {
                if (mn == -1 || mid < mn) mn = mid;
                if (mx == -1 || mid > mx) mx = mid;
                start = mid + 1;
                end = mid - 1;
            } 
            else if (nums[mid] < target) {
                start = mid + 1;
            } 
            else {
                end = mid - 1;
            }
        }        
        return new int[]{mn, mx};
    }
}
